generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  email            String?         @unique
  name             String?
  avatar           String?
  timezone         String          @default("UTC")
  plan             Plan            @default(FREE)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  apps             App[]
  posts            Post[]
  sessions         Session[]
  socialAccounts   SocialAccount[]
  chatHistories    ChatHistory[]
  subscription     Subscription?
  payments         Payment[]

  @@map("users")
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  status            SubscriptionStatus @default(INACTIVE)
  tier              Plan               @default(FREE)
  
  dodoCustomerId  String?
  dodoSubscriptionId String?
  
  startDate         DateTime          @default(now())
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  
  cancelAtPeriodEnd Boolean          @default(false)
  canceledAt        DateTime?
  
  trialStart        DateTime?
  trialEnd          DateTime?
  
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  payments          Payment[]

  @@map("subscriptions")
}

model Payment {
  id                String   @id @default(cuid())
  userId            String
  subscriptionId    String?
  
  dodoPaymentId     String   @unique
  amount            Int      // Amount in cents
  currency          String
  status            String
  paymentMethod     String?
  
  createdAt         DateTime @default(now())
  processedAt       DateTime?
  
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  
  @@map("payments")
}

enum SubscriptionStatus {
  INACTIVE
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts    SocialAccount[]

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}



model App {
  id          String      @id @default(cuid())
  name        String
  tagline     String?
  description String?
  url         String
  logoUrl     String?
  category    AppCategory @default(PRODUCTIVITY)
  stage       AppStage    @default(IDEA)
  status      AppStatus   @default(ACTIVE)
  launchDate  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts       Post[]
  scrapedData ScrapedData?

  @@map("apps")
}

model ScrapedData {
  id                 String   @id @default(cuid())
  appId              String   @unique
  title              String
  description        String?
  content            String?
  url                String
  metaTags           Json?
  openGraphData      Json?
  twitterCardData    Json?
  jsonLdData         Json?
  headings           String[]
  paragraphs         String[]
  lists              String[]
  features           String[]
  benefits           String[]
  pricing            String[]
  testimonials       String[]
  images             Json?
  videos             String[]
  documents          String[]
  logoUrl            String?
  favicon            String?
  socialLinks        Json?
  contactInfo        Json?
  technologies       String[]
  performanceMetrics Json?
  seoScore           Float?
  mobileOptimized    Boolean  @default(false)
  httpsEnabled       Boolean  @default(false)
  wordCount          Int?
  readingTime        Int?
  languageDetected   String?
  keywords           String[]
  sentiment          String?
  companyInfo        Json?
  businessModel      String?
  industryCategory   String?
  navigationMenu     String[]
  footerLinks        String[]
  internalLinks      String[]
  externalLinks      String[]
  products           Json?
  categories         String[]
  paymentMethods     String[]
  shippingInfo       String?
  analyticsTools     String[]
  trackingPixels     String[]
  scrapeQuality      Float    @default(0.8)
  completeness       Float    @default(0.8)
  lastScrapedAt      DateTime @default(now())
  scrapeDuration     Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  app                App      @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@map("scraped_data")
}





model SocialAccount {
  id             String     @id @default(cuid())
  platform       Platform
  platformUserId String
  username       String
  displayName    String
  avatar         String?
  isVerified     Boolean    @default(false)
  followerCount  Int?
  isActive       Boolean    @default(true)
  lastSyncAt     DateTime?
  syncStatus     SyncStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         String
  accountId      String?
  posts          Post[]
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  account        Account?   @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([platform, platformUserId])
  @@index([userId])
  @@index([platform])
  @@map("social_accounts")
}

model Post {
  id              String        @id @default(cuid())
  content         String
  mediaUrls       String[]
  hashtags        String[]
  mentions        String[]
  scheduledFor    DateTime?
  publishedAt     DateTime?
  status          PostStatus    @default(DRAFT)
  platform        Platform
  platformPostId  String?
  threadPosition  Int?
  parentPostId    String?
  views           Int           @default(0)
  likes           Int           @default(0)
  comments        Int           @default(0)
  shares          Int           @default(0)
  clicks          Int           @default(0)
  engagementRate  Float         @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  appId           String
  socialAccountId String?
  app             App           @relation(fields: [appId], references: [id], onDelete: Cascade)
  parentPost      Post?         @relation("PostThread", fields: [parentPostId], references: [id])
  replies         Post[]        @relation("PostThread")
  socialAccount   SocialAccount? @relation(fields: [socialAccountId], references: [id], onDelete: SetNull)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model ChatHistory {
  id        String   @id @default(cuid())
  userId    String
  sessionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([userId, sessionId]) // <- required for findUnique/upsert by compound key
  @@index([userId])
  @@index([sessionId])
  @@map("chat_histories")
}

model Message {
  id           String   @id @default(cuid())
  chatHistoryId String
  role         String
  content      String
  createdAt    DateTime @default(now())
  isTweet      Boolean  @default(false)
  chatHistory  ChatHistory @relation(fields: [chatHistoryId], references: [id], onDelete: Cascade)

  @@index([chatHistoryId])
}
                     



















enum Plan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum AppCategory {
  PRODUCTIVITY
  SAAS
  MOBILE_APP
  WEB_APP
  DEVELOPER_TOOLS
  DESIGN_TOOLS
  MARKETING_TOOLS
  ECOMMERCE
  EDUCATION
  GAMING
  FINANCE
  HEALTH_FITNESS
  SOCIAL
  OTHER
}

enum AppStage {
  IDEA
  DEVELOPMENT
  BETA
  LAUNCHED
  SCALING
  MATURE
}

enum AppStatus {
  ACTIVE
  PAUSED
  ARCHIVED
  DISCONTINUED
}



enum Platform {
  TWITTER
  GOOGLE
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
  DELETED
}

enum SyncStatus {
  PENDING
  SYNCING
  SUCCESS
  ERROR
}

